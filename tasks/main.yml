---
# tasks file for ansible-arch-setup

- name: Abort if the host is not booted from the Arch install media
  fail:
    msg: "This host is not booted from the Arch install media!"
  when: ansible_nodename != 'archiso'

- name: Synchronize clock via NTP
  command: timedatectl set-ntp true

# Repartition install drive
- include_tasks: "partitions-bios.yml"
  when: bios

- include_tasks: "partitions-efi.yml"
  when: efi

# Rank Arch mirrors
- name: Install the pacman-contrib package (for rankmirrors)
  pacman:
    name:
      - pacman-contrib
    update_cache: yes

- name: Use rankmirrors to filter the fastest mirrors that support HTTPS
  shell: curl -s "https://www.archlinux.org/mirrorlist/?country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 20 - > /etc/pacman.d/mirrorlist

# Run pacstrap
- name: Run pacstrap
  command: pacstrap /mnt {{ item }}
  loop:
    - base
    - base-devel
    - dhclient
    - dhcpcd
    - efibootmgr
    - grub
    - linux
    - linux-firmware
    - openssh
    - python
    - sudo
    - nano
    - networkmanager
    - git

- name: Run pacstrap - nvidia & nvidia-settings
  command: pacstrap /mnt {{ item }}
  loop:
    - nvidia
    - nvidia-settings
  when: nvidia

- name: Run pacstrap - amd-ucode
  command: pacstrap /mnt amd-ucode
  when: amd

- name: Run pacstrap - intel-ucode mesa
  command: pacstrap /mnt {{ item }}
  loop:
    - intel-ucode
    - mesa
  when: intel

- name: Run pacstrap - bluetooth
  command: pacstrap /mnt {{ item }}
  loop:
    - bluez
    - bluez-utils
  when: bluetooth

- name: Run pacstrap - xorg-server & xorg-apps
  command: pacstrap /mnt {{ item }}
  loop:
    - xorg
    - xorg-server
    - xorg-apps
    - xorg-xinit
  when: xorg

- name: Run pacstrap - plasma & kde-applications
  command: pacstrap /mnt {{ item }}
  loop: 
    - plasma
    - kde-applications
  when: plasma

# Generate fstab
- name: Generate blank fstab
  command: genfstab -Up /mnt > /mnt/etc/fstab

# Set local timezone
- name: Set local timezone
  command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

- name: Generate adjtime file
  command: arch-chroot /mnt hwclock --systohc

# Setup locales
- name: Configure locale.gen
  lineinfile:
    dest: /mnt/etc/locale.gen
    regexp: '{{ item.regex }}'
    line: '{{ item.line }}'
  loop:
    - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
    - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}

- name: Create locale.conf
  copy:
    content: "LANG=en_US.UTF-8"
    dest: /mnt/etc/locale.conf

- name: Generate locales
  command: arch-chroot /mnt locale-gen

# Set keyboard layout to german
- name: Create locale.conf
  copy:
    content: "KEYMAP=de"
    dest: /mnt/etc/vconsole.conf

- name: Write 00-keyboard.conf
  template:
    src: 00-keyboard.j2
    dest: /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
  when: xorg

- name: Sets permissions of 00-keyboard.conf
  command: "{{ item }}"
  loop:
    - arch-chroot /mnt chown root:root /etc/X11/xorg.conf.d/00-keyboard.conf
    - arch-chroot /mnt chmod 644 /etc/X11/xorg.conf.d/00-keyboard.conf
  when: xorg

# Set hostname
- name: Set hostname
  copy:
    content: '{{ hostname }}'
    dest: /mnt/etc/hostname

# Enable Network-Manager
- name: Enable NetworkManager.service
  command: arch-chroot /mnt systemctl enable NetworkManager

# Set up initramfs
- name: Create new initramfs
  command: arch-chroot /mnt mkinitcpio -p linux

# Set up grub
- name: bios - Install grub
  command: arch-chroot /mnt grub-install {{ install_drive }}
  when: bios

- name: efi - Install grub
  command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=archlinux
  when: efi

- name: Create grub config
  command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# sudo
- name: Give passwordless sudo access to wheel group
  copy:
    content: '%wheel ALL=(ALL) ALL'
    dest: /mnt/etc/sudoers.d/wheel
    validate: /usr/sbin/visudo --check --file=%s

- name: Create user account
  command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}

# Create user with sudo priviledges
- name: Create user's ssh directory
  file:
    path: /mnt/home/{{ user_name }}/.ssh
    state: directory

- name: Set mode, owner, and group on user's ssh directory
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0700 /home/{{ user_name }}/.ssh
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

- name: Copy over ssh key from current Ansible controller as an authorized key
  copy:
    src: '{{ lookup("env", "HOME") }}/.ssh/id_rsa.pub'
    dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys

- name: Set mode, owner, and group on user's authorized_key file
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

- name: Preparing .xinitrc for KDE plasma
  copy:
    content: "export DESKTOP_SESSION=plasma"
    dest: /mnt/home/{{ user_name }}/.xinitrc
  when: plasma

- name: Preparing .xinitrc for KDE plasma
  lineinfile:
    dest: /mnt/home/{{ user_name }}/.xinitrc
    insertafter: EOF
    line: "exec startplasma-x11"
    state: present
    create: yes
  when: plasma

- name: Preparing .xinitrc for KDE plasma
  command: "{{ item }}"
  loop:
    - arch-chroot /mnt chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.xinitrc
  when: plasma

# Change Keyserver
- name: Create user's .gnupg directory
  file:
    path: /mnt/home/{{ user_name }}/.gnupg
    state: directory

- name: keyserver hkps://keyserver.ubuntu.com
  copy:
    content: "keyserver hkps://keyserver.ubuntu.com"
    dest: /mnt/home/{{ user_name }}/.gnupg/gpg.conf

- name: keyserver hkps://keyserver.ubuntu.com
  command: "{{ item }}"
  loop:
    - arch-chroot /mnt chown -R {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.gnupg
    - arch-chroot /mnt chmod 600 /home/{{ user_name }}/.gnupg/gpg.conf
    - arch-chroot /mnt chmod 700 /home/{{ user_name }}/.gnupg

# bluetooth working in login screen
- name: bluetooth AutoEnable=true
  become: yes
  lineinfile:
    dest: /mnt/etc/bluetooth/main.conf
    regexp: '#?AutoEnable='
    line: 'AutoEnable=true'
  when: bluetooth

# enable bluetooth
- name: Enable bluetooth
  command: arch-chroot /mnt systemctl enable bluetooth
  when: bluetooth

# Enable sddm
- name: Enable sddm.service
  command: arch-chroot /mnt systemctl enable sddm
  when: plasma

# Enable sddm
- name: Enable sshd.service
  command: arch-chroot /mnt systemctl enable sshd
  when: sshd

# reboot
- name: Reboot
  reboot:
    connect_timeout: 1
    reboot_timeout: 1
  failed_when: false
