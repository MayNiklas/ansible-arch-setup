---
# tasks file for ansible-arch-setup

- name: Abort if the host is not booted from the Arch install media
  fail:
    msg: "This host is not booted from the Arch install media!"
  when: ansible_nodename != 'archiso'

- name: Synchronize clock via NTP
  command: timedatectl set-ntp true

# Repartition install drive
- name: Wipe install drive and all its partitions
  command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;

- name: Create boot partition
  parted:
    device: '{{ install_drive }}'
    label: gpt
    number: 1
    part_end: 512MB
    name: boot
    flags: [boot, esp]
    state: present

- name: Create root partition
  parted:
    device: '{{ install_drive }}'
    label: gpt
    number: 2
    part_start: 512MB
    name: root
    flags: [lvm]
    state: present

# Create filesystems
- name: Create FAT32 filesystem in boot partition
  filesystem:
    dev: '{{ install_drive }}{{ boot_partition_suffix }}'
    fstype: vfat
    opts: -F32
    force: yes

- name: Create ext4 filesystem in root volume
  filesystem:
    dev: '{{ install_drive }}{{ root_partition_suffix }}'
    fstype: ext4
    force: yes

- name: Get UUID for boot filesystem
  command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
  register: boot_uuid
  changed_when: false

- name: Get UUID for root filesystem
  command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
  register: root_uuid
  changed_when: false

# Mount filesystems
- name: Mount root filesystem
  mount:
    path: /mnt
    src: UUID={{ root_uuid.stdout }}
    fstype: ext4
    state: mounted

- name: Create mountpoint for boot volume
  file:
    path: /mnt/boot
    state: directory

- name: Mount boot filesystem
  mount:
    path: /mnt/boot
    src: UUID={{ boot_uuid.stdout }}
    fstype: vfat
    state: mounted

# Rank Arch mirrors
- name: Install the pacman-contrib package (for rankmirrors)
  pacman:
    name:
      - pacman-contrib
    update_cache: yes

- name: Use rankmirrors to filter the fastest mirrors that support HTTPS
  shell: curl -s "https://www.archlinux.org/mirrorlist/?country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

# Run pacstrap
- name: Run pacstrap
  command: pacstrap /mnt {{ item }}
  loop:
    - base
    - dhclient
    - dhcpcd
    - efibootmgr
    - grub
    - linux
    - linux-firmware
    - openssh
    - python
    - sudo
    - nano
    - networkmanager

- name: Run pacstrap - nvidia & nvidia-settings
  command: pacstrap /mnt {{ item }}
  loop:
    - nvidia
    - nvidia-settings
  when: nvidia

- name: Run pacstrap - amd-ucode
  command: pacstrap /mnt amd-ucode
  when: amd

- name: Run pacstrap - intel-ucode mesa
  command: pacstrap /mnt {{ item }}
  loop:
    - intel-ucode
    - mesa
  when: intel

# Generate fstab
- name: Generate blank fstab
  command: genfstab -U /mnt >> /mnt/etc/fstab

- name: Add root volume to fstab
  mount:
    fstab: /mnt/etc/fstab
    path: /
    src: UUID={{ root_uuid.stdout }}
    fstype: ext4
    opts: defaults
    passno: '1'
    state: present

- name: Add boot volume to fstab
  mount:
    fstab: /mnt/etc/fstab
    path: /boot
    src: UUID={{ boot_uuid.stdout }}
    fstype: vfat
    opts: defaults
    passno: '2'
    state: present

# Set local timezone
- name: Set local timezone
  command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

- name: Generate adjtime file
  command: arch-chroot /mnt hwclock --systohc

# Setup locales
- name: Configure locale.gen
  lineinfile:
    dest: /mnt/etc/locale.gen
    regexp: '{{ item.regex }}'
    line: '{{ item.line }}'
  loop:
    - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
    - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}

- name: Create locale.conf
  copy:
    content: "LANG=en_US.UTF-8"
    dest: /mnt/etc/locale.conf

- name: Generate locales
  command: arch-chroot /mnt locale-gen

# Set keyboard layout to german
- name: Create locale.conf
  copy:
    content: "KEYMAP=de"
    dest: /mnt/etc/vconsole.conf

# Set hostname
- name: Set hostname
  copy:
    content: '{{ hostname }}'
    dest: /mnt/etc/hostname

# Enable Network-Manager
- name: Enable NetworkManager.service
  command: arch-chroot /mnt systemctl enable NetworkManager

# Set up initramfs
- name: Create new initramfs
  command: arch-chroot /mnt mkinitcpio -p linux

# Set up grub
- name: Install grub
  command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=archlinux

- name: Create grub config
  command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# sudo
- name: Give passwordless sudo access to wheel group
  copy:
    content: '%wheel ALL=(ALL) ALL'
    dest: /mnt/etc/sudoers.d/wheel
    validate: /usr/sbin/visudo --check --file=%s

- name: Create user account
  command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}

# Create user with sudo priviledges
- name: Create user's ssh directory
  file:
    path: /mnt/home/{{ user_name }}/.ssh
    state: directory

- name: Set mode, owner, and group on user's ssh directory
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0700 /home/{{ user_name }}/.ssh
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

- name: Copy over ssh key from current Ansible controller as an authorized key
  copy:
    src: '{{ lookup("env", "HOME") }}/.ssh/id_rsa.pub'
    dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys

- name: Set mode, owner, and group on user's authorized_key file
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

# reboot
- name: Reboot
  reboot:
    connect_timeout: 1
    reboot_timeout: 1
  failed_when: false
