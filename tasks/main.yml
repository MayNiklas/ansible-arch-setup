---
# tasks file for ansible-arch-setup

- name: Abort if the host is not booted from the Arch install media
  fail:
    msg: "This host is not booted from the Arch install media!"
  when: ansible_nodename != 'archiso'

- name: Synchronize clock via NTP
  command: timedatectl set-ntp true

# Repartition install drive
- include_tasks: "partitions-bios.yml"
  when: bios

- include_tasks: "partitions-efi.yml"
  when: efi

# Rank Arch mirrors
- name: Install the pacman-contrib package (for rankmirrors)
  pacman:
    name:
      - pacman-contrib
    update_cache: yes

- name: Use rankmirrors to filter the fastest mirrors that support HTTPS
  shell: curl -s "https://www.archlinux.org/mirrorlist/?country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 20 - > /etc/pacman.d/mirrorlist

# Run pacstrap
- name: Run pacstrap
  command: pacstrap /mnt {{ item }}
  loop:
    - base
    - base-devel
    - dhclient
    - dhcpcd
    - grub
    - linux
    - linux-firmware
    - openssh
    - python
    - sudo
    - nano
    - networkmanager
    - git
    - ansible



- name: Run pacstrap - xorg-server & xorg-apps
  command: pacstrap /mnt {{ item }}
  loop:
    - xorg
    - xorg-server
    - xorg-apps
    - xorg-xinit
  when: xorg

- include_tasks: "drivers.yml"

# Generate fstab
- name: Generate blank fstab
  command: genfstab -Up /mnt > /mnt/etc/fstab

- name: Write 00-keyboard.conf
  template:
    src: 00-keyboard.j2
    dest: /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
  when: xorg

- name: Sets permissions of 00-keyboard.conf
  command: "{{ item }}"
  loop:
    - arch-chroot /mnt chown root:root /etc/X11/xorg.conf.d/00-keyboard.conf
    - arch-chroot /mnt chmod 644 /etc/X11/xorg.conf.d/00-keyboard.conf
  when: xorg

# Set hostname
- name: Set hostname
  copy:
    content: '{{ hostname }}'
    dest: /mnt/etc/hostname

# Enable Network-Manager
- name: Enable NetworkManager.service
  command: arch-chroot /mnt systemctl enable NetworkManager


# sudo
- name: Give passwordless sudo access to wheel group
  copy:
    content: '%wheel ALL=(ALL) ALL'
    dest: /mnt/etc/sudoers.d/wheel
    validate: /usr/sbin/visudo --check --file=%s

- name: Create user account
  command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}

# Create user with sudo priviledges
- name: Create user's ssh directory
  file:
    path: /mnt/home/{{ user_name }}/.ssh
    state: directory

- name: Set mode, owner, and group on user's ssh directory
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0700 /home/{{ user_name }}/.ssh
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

- name: Copy over ssh key from current Ansible controller as an authorized key
  copy:
    src: '{{ lookup("env", "HOME") }}/.ssh/id_rsa.pub'
    dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys
- include_tasks: "bluetooth.yml"
  when: bluetooth

- name: Set mode, owner, and group on user's authorized_key file
  command: arch-chroot /mnt {{ item }}
  loop:
    - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
    - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys



- include_tasks: "kde-plasma.yml"
  when: plasma

- include_tasks: "keyserver.yml"



# reboot
- name: Reboot
  reboot:
    connect_timeout: 1
    reboot_timeout: 1
  failed_when: false
